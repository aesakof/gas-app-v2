Create a new project folder and cd into it 

Create two folders in the main project folder, 'django-backend' and 'react-frontend'

DJANGO SETUP

cd into django-backend

Create a new virtual environment using pipenv: 
    pipenv install

Activate the virtual env: 
    pipenv shell

Install various dependencies:
    pipenv install django
    pipenv install djangorestframework
    pipenv install djangorestframework-simplejwt
    pipenv install django-cors-headers

Create django project in the current folder:
    django-admin startproject core .

Create django apps for the main app, its api, and users
    python manage.py startapp gas_app
    python manage.py startapp gas_app_api
    python manage.py startapp users

In core/settings.py, add 'gas_app', 'gas_app_api', 'users', and 'rest_framework' to the list INSTALLED_APPS

In gas_app/urls.py (create the file), add:
        from django.urls import path
        from django.views.generic import TemplateView

        app_name = 'gas_app'

        urlpatterns = [
            path('', TemplateView.as_view(template_name="gas_app/index.html")),
        ]

In gas_app_api/urls.py (create the file), add:
        from django.urls import path
        from .views import FillupList, FillupDetail, CarList, CarDetail

        app_name = 'gas_app_api'

        urlpatterns = [
            path('<int:pk>/', CarDetail.as_view(), name='cardetailcreate'),
            path('', CarList.as_view(), name='carlistcreate'),
        ]

Create an index.html file in templates/gas_app (create these folders), and add the following line to it:
        //index

In core/settings.py, in the TEMPLATES list in DIRS, add the following:
        TEMPLATES = [
            {
                ...
                'DIRS': [BASE_DIR / 'templates'],
                ...
            },
        ]

In core/urls.py, add 'include' to what is imported from django.urls and also add the following two lines to the urlpatterns list:
        path(('', include('gas_app.urls', namespace='gas_app'))),
        path('api/', include('gas_app_api.urls', namespace='gas_app_api')),

In gas_app/models.py, create the models:

        from django.db import models
        from django.contrib.auth.models import User
        from django.utils import timezone
        from datetime import date, datetime
        from django.core.validators import MinValueValidator

        next_year = datetime.today().year+1
        last_30_years = list(range(next_year-30, next_year))
        MODEL_YEARS = [(i,j) for i,j in zip(last_30_years,last_30_years)]

        STATUS = [('Active', 'Active'), ('Inactive', 'Inactive')]

        class Fillup(models.Model):
            username = models.ForeignKey(User,on_delete=models.CASCADE)
            date = models.DateField(default=date.today)
            price_per_gallon = models.FloatField(validators=[MinValueValidator(0.0)])
            trip_distance = models.FloatField(validators=[MinValueValidator(0.0)])
            gallons = models.FloatField(validators=[MinValueValidator(0.0)])
            car = models.ForeignKey('Car',on_delete=models.CASCADE)

            @property
            def total_sale(self):
                return round(self.price_per_gallon*self.gallons, 2)

            @property
            def mpg(self):
                if self.gallons == 0:
                    return 0
                else:
                    return round(self.trip_distance/self.gallons, 4)


        class Car(models.Model):
            username = models.ForeignKey(User,on_delete=models.CASCADE)
            name = models.CharField(max_length=25)
            make = models.CharField(max_length=25)
            model = models.CharField(max_length=25)
            model_year = models.IntegerField(choices=MODEL_YEARS)
            status = models.CharField(max_length=10,choices=STATUS,default='Active')

            def __str__(self):
                return self.name

For each of the models, make an object manager to set a default queryset (the filter can be set to whatever):

    class FillupObjects(models.Manager):
        def get_queryset(self):
            return super().get_queryset() #.filter()

    class CarObjects(models.Manager):
        def get_queryset(self):
            return super().get_queryset() #.filter()

And add the following two lines to each model (change car to fillup for the Fillup object):

    objects = models.Manager() # default manager
    carobjects = CarObjects() # custom manager

Make migrations and commit them to the db:

    python manage.py makemigrations
    python manage.py migrate

Create the file gas_app_api/serializers.py and create serializers for both models:
        from rest_framework import serializers
        from gas_app.models import Fillup, Car

        class FillupSerializer(serializers.ModelSerializer):
            class Meta:
                model = Fillup
                fields = ('username', 'date', 'price_per_gallon', 'trip_distance', 'gallons', 'car', 'total_sale', 'mpg')

        class CarSerializer(serializers.ModelSerializer):
            class Meta:
                model = Car
                fields = ('username', 'name', 'make', 'model', 'model_year', 'status')


Create a superuser: python manage.py createsuperuser

Add the following lines to gas_app/admin.py:

    from django.contrib import admin
    from . import models

    admin.site.register(models.Fillup)
    admin.site.register(models.Car)

Run the server: python manage.py runserver

The api calls for creating Cars and Fillups can now be tested at:
    http://127.0.0.1:8000/api/cars/
    http://127.0.0.1:8000/api/Fillups/

In case of a "no such table" exception (in initial project set up), delete the sqlite db and all migration folders, then run:
    python manage.py migrate --run-syncdb

Add the following to the end of settings.py:

    REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.AllowAny',
        ]
    }













USERS APP SETUP

In user/models.py, add the following:

        from django.db import models
        from django.utils import timezone
        from django.utils.translation import gettext_lazy as _
        from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager


        class CustomAccountManager(BaseUserManager):

            def create_superuser(self, email, user_name, first_name, password, **other_fields):

                other_fields.setdefault('is_staff', True)
                other_fields.setdefault('is_superuser', True)
                other_fields.setdefault('is_active', True)

                if other_fields.get('is_staff') is not True:
                    raise ValueError(
                        'Superuser must be assigned to is_staff=True.')
                if other_fields.get('is_superuser') is not True:
                    raise ValueError(
                        'Superuser must be assigned to is_superuser=True.')

                return self.create_user(email, user_name, first_name, password, **other_fields)

            def create_user(self, email, user_name, first_name, password, **other_fields):

                if not email:
                    raise ValueError(_('You must provide an email address'))

                email = self.normalize_email(email)
                user = self.model(email=email, user_name=user_name,
                                first_name=first_name, **other_fields)
                user.set_password(password)
                user.save()
                return user


        class AppUser(AbstractBaseUser, PermissionsMixin):

            email = models.EmailField(_('email address'), unique=True)
            user_name = models.CharField(max_length=150, unique=True)
            first_name = models.CharField(max_length=150, blank=True)
            start_date = models.DateTimeField(default=timezone.now)
            about = models.TextField(_(
                'about'), max_length=500, blank=True)
            is_staff = models.BooleanField(default=False)
            is_active = models.BooleanField(default=False)

            objects = CustomAccountManager()

            USERNAME_FIELD = 'email'
            REQUIRED_FIELDS = ['user_name', 'first_name']

            def __str__(self):
                return self.user_name


In users/admin.py, add the following:

        from django.contrib import admin
        from users.models import AppUser
        from django.contrib.auth.admin import UserAdmin
        from django.forms import TextInput, Textarea, CharField
        from django import forms
        from django.db import models


        class UserAdminConfig(UserAdmin):
            model = AppUser
            search_fields = ('email', 'user_name', 'first_name',)
            list_filter = ('email', 'user_name', 'first_name', 'is_active', 'is_staff')
            ordering = ('-start_date',)
            list_display = ('email', 'id', 'user_name', 'first_name',
                            'is_active', 'is_staff')
            fieldsets = (
                (None, {'fields': ('email', 'user_name', 'first_name',)}),
                ('Permissions', {'fields': ('is_staff', 'is_active')}),
                ('Personal', {'fields': ('about',)}),
            )
            formfield_overrides = {
                models.TextField: {'widget': Textarea(attrs={'rows': 20, 'cols': 60})},
            }
            add_fieldsets = (
                (None, {
                    'classes': ('wide',),
                    'fields': ('email', 'user_name', 'first_name', 'password1', 'password2', 'is_active', 'is_staff')}
                ),
            )


        admin.site.register(AppUser, UserAdminConfig)


In users/apps.py, add the following:

        from django.apps import AppConfig


        class UsersConfig(AppConfig):
            name = 'users'


In users/serializers.py, add the following:

        from rest_framework import serializers
        from users.models import AppUser


        class CustomUserSerializer(serializers.ModelSerializer):
            """
            Currently unused in preference of the below.
            """
            email = serializers.EmailField(required=True)
            user_name = serializers.CharField(required=True)
            password = serializers.CharField(min_length=8, write_only=True)

            class Meta:
                model = AppUser
                fields = ('email', 'user_name', 'password')
                extra_kwargs = {'password': {'write_only': True}}

            def create(self, validated_data):
                password = validated_data.pop('password', None)
                # as long as the fields are the same, we can just use this
                instance = self.Meta.model(**validated_data)
                if password is not None:
                    instance.set_password(password)
                instance.save()
                return instance


In users/urls.py, add the following:

        from django.urls import path
        from .views import CustomUserCreate, BlacklistTokenUpdateView

        app_name = 'users'

        urlpatterns = [
            path('register/', CustomUserCreate.as_view(), name='create_user'),
            path('logout/blacklist/', BlacklistTokenUpdateView.as_view(), name='blacklist')
        ]


In users/views.py, add the following:

        from rest_framework_simplejwt.views import TokenObtainPairView
        from rest_framework import status
        from rest_framework.response import Response
        from rest_framework.views import APIView
        from .serializers import CustomUserSerializer
        from rest_framework_simplejwt.tokens import RefreshToken
        from rest_framework.permissions import AllowAny


        class CustomUserCreate(APIView):
            permission_classes = [AllowAny]

            def post(self, request, format='json'):
                serializer = CustomUserSerializer(data=request.data)
                if serializer.is_valid():
                    user = serializer.save()
                    if user:
                        json = serializer.data
                        return Response(json, status=status.HTTP_201_CREATED)
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


        class BlacklistTokenUpdateView(APIView):
            permission_classes = [AllowAny]
            authentication_classes = ()

            def post(self, request):
                try:
                    refresh_token = request.data["refresh_token"]
                    token = RefreshToken(refresh_token)
                    token.blacklist()
                    return Response(status=status.HTTP_205_RESET_CONTENT)
                except Exception as e:
                    return Response(status=status.HTTP_400_BAD_REQUEST)


In core/settings.py, add the following:
    # Custom user model
    AUTH_USER_MODEL = "users.AppUser"



    pipenv install coverage
    pipenv install pyyaml
    pipenv install uritemplate
    pipenv install coreapi
